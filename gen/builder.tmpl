package prop

{{range .Types -}}
type {{.Type}}Builder struct {
    builder
}

// ParameterProp implements types.ParameterPropBuilder, build a property.
func (b *{{.Type}}Builder) ParameterProp() *desc.Prop {
    return b.prop
}

{{if not .IsParameter}}
// ModelProp implements types.ModelPropBuilder, build a property.
func (b *{{.Type}}Builder) ModelProp() *desc.Prop {
    return b.prop
}{{end}}

// StructTag add a struct tag in this property.
func (b *{{.Type}}Builder) StructTag(key, value string) *{{.Type}}Builder {
    b.structTag(key, value)
    return b
}

// Validator add a go-validator tag in this property.
func (b *{{.Type}}Builder) Validator(v ...string) *{{.Type}}Builder {
    b.validator(v...)
    return b
}

// Title set title for this property. The title should be a single line text to introduce this propery.
func (b *{{.Type}}Builder) Title(title string) *{{.Type}}Builder {
    b.title(title)
    return b
}

// Description set description for this property.
// The description can be a multi line text to tell details of this propery.
func (b *{{.Type}}Builder) Description(desc string) *{{.Type}}Builder {
    b.description(desc)
    return b
}

// Example set example values for this property. 
func (b *{{.Type}}Builder) Example(example string) *{{.Type}}Builder {
    b.example(example)
    return b
}

// Required mark this property is required
func (b *{{.Type}}Builder) Required() *{{.Type}}Builder {
    b.required()
    return b
}

{{if .GoType}}
// GoType to set override type of this property. The type must be convertible to {{.Type}}.
func (b *{{.Type}}Builder) GoType(i interface{}) *{{.Type}}Builder {
    b.goType(i, {{.GoType}}Type)
    return b
}{{end}}

{{if .InPath}}
// InPath to declare the localtion of this field is url path.
func (b *{{.Type}}Builder) InPath() *{{.PType}}Builder {
    b.inPath()
    return (*{{.PType}}Builder)(b)
}{{end}}

{{if .InQuery}}
// InPath to declare the localtion of this field is query string.
func (b *{{.Type}}Builder) InQuery() *{{.PType}}Builder {
    b.inQuery()
    return (*{{.PType}}Builder)(b)
}{{end}}

{{if .MaximumInt}}
// Maximum set the maximum value of this property.
func (b *{{.Type}}Builder) Maximum(max int) *{{.Type}}Builder {
    b.maximum(&max, nil)
    return b
}{{end}}

{{if .MinimumInt}}
// Minimum set the minimum value of this property.
func (b *{{.Type}}Builder) Minimum(min int) *{{.Type}}Builder {
    b.minimum(&min, nil)
    return b
}{{end}}

{{if .MaximumFloat}}
// Maximum set the maximum value of this property.
func (b *{{.Type}}Builder) Maximum(max float64) *{{.Type}}Builder {
    b.maximum(nil, &max)
    return b
}{{end}}

{{if .MinimumFloat}}
// Minimum set the minimum value of this property.
func (b *{{.Type}}Builder) Minimum(min float64) *{{.Type}}Builder {
    b.minimum(nil, &min)
    return b
}{{end}}

{{if .MaximumLength}}
// MaximumLength set maximum length of string.
func (b *{{.Type}}Builder) MaximumLength(max uint) *{{.Type}}Builder {
    b.maximumLength(max)
    return b
}{{end}}

{{if .MinimumLength}}
// MinimumLength set maximum length of string.
func (b *{{.Type}}Builder) MinimumLength(min uint) *{{.Type}}Builder {
    b.minimumLength(min)
    return b
}{{end}}

{{if .Pattern}}
// Pattern to set value pattern with regular expression.
// As go-validator not support regular expression will (because some the performance reason),
// You should set a go-validator struct filed.
func (b *{{.Type}}Builder) Pattern(regex string, validators ...string) *{{.Type}}Builder {
    b.pattern(regex, validators...)
    return b
}{{end}}

{{if .Enum}}
// Enum to set the valid values for string property.
func (b *{{.Type}}Builder) Enum(values ...string) *{{.Type}}Builder {
    b.enum(values...)
    return b
}{{end}}

{{if .MaximumItems}}
// MaximumItems to set the maximum count of array items.
func (b *{{.Type}}Builder) MaximumItems(max uint) *{{.Type}}Builder {
    b.maximumItems(max)
    return b
}{{end}}

{{if .MinimumItems}}
// MinimumItems to set the minimum count of array items.
func (b *{{.Type}}Builder) MinimumItems(min uint) *{{.Type}}Builder {
    b.minimumItems(min)
    return b
}{{end}}

{{if .Unique}}
// Unique to mark items in array is unique.
func (b *{{.Type}}Builder) Unique() *{{.Type}}Builder {
    b.unique()
    return b
}{{end}}
{{end}}
